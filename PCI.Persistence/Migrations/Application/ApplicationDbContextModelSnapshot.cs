// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PCI.Persistence.Context;

#nullable disable

namespace PCI.Persistence.Migrations.Application
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("APP")
                .HasAnnotation("ProductVersion", "8.0.13");

            modelBuilder.Entity("PCI.Domain.Models.AccountSubType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountType")
                        .HasDatabaseName("IX_AccountSubType_AccountType");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_AccountSubType_Code");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_AccountSubType_IsActive");

                    b.HasIndex("AccountType", "DisplayOrder")
                        .HasDatabaseName("IX_AccountSubType_AccountType_DisplayOrder");

                    b.ToTable("AccountSubType", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.AccountTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("EntryType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("AccountTransaction", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Brand", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.BusinessAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressLabel")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("AddressType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("VendorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AddressType")
                        .HasDatabaseName("IX_BusinessAddress_AddressType");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_BusinessAddress_IsActive");

                    b.HasIndex("IsDefault")
                        .HasDatabaseName("IX_BusinessAddress_IsDefault");

                    b.HasIndex("VendorId");

                    b.HasIndex("EntityType", "EntityId")
                        .HasDatabaseName("IX_BusinessAddress_Entity");

                    b.HasIndex("OrganisationId", "EntityType")
                        .HasDatabaseName("IX_BusinessAddress_Organisation_EntityType");

                    b.HasIndex("EntityType", "EntityId", "AddressType")
                        .HasDatabaseName("IX_BusinessAddress_Entity_AddressType");

                    b.HasIndex("EntityType", "EntityId", "IsDefault")
                        .HasDatabaseName("IX_BusinessAddress_Entity_IsDefault");

                    b.ToTable("BusinessAddresses", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.BusinessBankInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountHolderName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("BankAddress")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("BankBranch")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("IFSCCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SWIFTCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int?>("VendorId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("VerificationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("VerifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountNumber")
                        .HasDatabaseName("IX_BusinessBankInfo_BankAccountNumber");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IFSCCode")
                        .HasDatabaseName("IX_BusinessBankInfo_IFSCCode");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_BusinessBankInfo_IsActive");

                    b.HasIndex("IsPrimary")
                        .HasDatabaseName("IX_BusinessBankInfo_IsPrimary");

                    b.HasIndex("IsVerified")
                        .HasDatabaseName("IX_BusinessBankInfo_IsVerified");

                    b.HasIndex("VendorId");

                    b.HasIndex("BankName", "BankAccountNumber")
                        .HasDatabaseName("IX_BusinessBankInfo_Bank_Account");

                    b.HasIndex("EntityType", "EntityId")
                        .HasDatabaseName("IX_BusinessBankInfo_Entity");

                    b.HasIndex("OrganisationId", "EntityType")
                        .HasDatabaseName("IX_BusinessBankInfo_Organisation_EntityType");

                    b.HasIndex("EntityType", "EntityId", "IsPrimary")
                        .HasDatabaseName("IX_BusinessBankInfo_Entity_IsPrimary");

                    b.ToTable("BusinessBankInfos", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.BusinessContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactPersonName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("ContactType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Extension")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LinkedInProfile")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("VendorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ContactType")
                        .HasDatabaseName("IX_BusinessContact_ContactType");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_BusinessContact_Email");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_BusinessContact_IsActive");

                    b.HasIndex("IsPrimary")
                        .HasDatabaseName("IX_BusinessContact_IsPrimary");

                    b.HasIndex("VendorId");

                    b.HasIndex("EntityType", "EntityId")
                        .HasDatabaseName("IX_BusinessContact_Entity");

                    b.HasIndex("OrganisationId", "EntityType")
                        .HasDatabaseName("IX_BusinessContact_Organisation_EntityType");

                    b.HasIndex("EntityType", "EntityId", "ContactType")
                        .HasDatabaseName("IX_BusinessContact_Entity_ContactType");

                    b.HasIndex("EntityType", "EntityId", "IsPrimary")
                        .HasDatabaseName("IX_BusinessContact_Entity_IsPrimary");

                    b.ToTable("BusinessContacts", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.BusinessTaxInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("IssuingAuthority")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaxCategory")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("TaxType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("TEXT");

                    b.Property<int?>("VendorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_BusinessTaxInfo_IsActive");

                    b.HasIndex("IsPrimary")
                        .HasDatabaseName("IX_BusinessTaxInfo_IsPrimary");

                    b.HasIndex("TaxNumber")
                        .HasDatabaseName("IX_BusinessTaxInfo_TaxNumber");

                    b.HasIndex("TaxType")
                        .HasDatabaseName("IX_BusinessTaxInfo_TaxType");

                    b.HasIndex("VendorId");

                    b.HasIndex("EntityType", "EntityId")
                        .HasDatabaseName("IX_BusinessTaxInfo_Entity");

                    b.HasIndex("OrganisationId", "EntityType")
                        .HasDatabaseName("IX_BusinessTaxInfo_Organisation_EntityType");

                    b.HasIndex("TaxType", "TaxNumber")
                        .HasDatabaseName("IX_BusinessTaxInfo_TaxType_TaxNumber");

                    b.HasIndex("EntityType", "EntityId", "TaxType")
                        .IsUnique()
                        .HasDatabaseName("IX_BusinessTaxInfo_Entity_TaxType_Unique");

                    b.ToTable("BusinessTaxInfos", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Capital")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencyName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencySymbol")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<string>("Emoji")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmojiU")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Iso2")
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Iso3")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(11,8)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Native")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("NumericCode")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneCode")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subregion")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tld")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Iso2")
                        .IsUnique()
                        .HasDatabaseName("IX_Countries_Iso2");

                    b.HasIndex("Iso3")
                        .IsUnique()
                        .HasDatabaseName("IX_Countries_Iso3");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Countries_Name");

                    b.ToTable("Countries", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("DecimalPlaces")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBaseCurrency")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsBaseCurrency");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Currencies", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("BLOB");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("IX_Customer_CurrencyId");

                    b.HasIndex("CustomerCode")
                        .HasDatabaseName("IX_Customer_CustomerCode");

                    b.HasIndex("CustomerName")
                        .HasDatabaseName("IX_Customer_CustomerName");

                    b.HasIndex("CustomerType")
                        .HasDatabaseName("IX_Customer_CustomerType");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Customer_IsActive");

                    b.HasIndex("OrganisationId")
                        .HasDatabaseName("IX_Customer_OrganisationId");

                    b.HasIndex("OrganisationId", "CustomerCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Customer_OrganisationId_CustomerCode");

                    b.HasIndex("OrganisationId", "CustomerType")
                        .HasDatabaseName("IX_Customer_OrganisationId_CustomerType");

                    b.HasIndex("OrganisationId", "IsActive")
                        .HasDatabaseName("IX_Customer_OrganisationId_IsActive");

                    b.ToTable("Customers", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.CustomerFinancial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreditHoldReason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CreditLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("CreditReviewDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentBalance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DefaultDiscountPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsOnCreditHold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastPaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastSaleDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinimumOrderValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("OutstandingAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("PaymentTermDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(30);

                    b.Property<string>("PreferredPaymentMethod")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("BankTransfer");

                    b.Property<decimal>("TotalSalesLifetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TotalSalesYTD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("OrganisationId");

                    b.ToTable("CustomerFinancials", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.CustomerPriceList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PriceListId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PriceListId");

                    b.ToTable("CustomerPriceList", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.GLAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("AccountSubTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsSystemAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentAccountId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountCode")
                        .HasDatabaseName("IX_GLAccount_AccountCode");

                    b.HasIndex("AccountName")
                        .HasDatabaseName("IX_GLAccount_AccountName");

                    b.HasIndex("AccountSubTypeId")
                        .HasDatabaseName("IX_GLAccount_AccountSubTypeId");

                    b.HasIndex("AccountType")
                        .HasDatabaseName("IX_GLAccount_AccountType");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_GLAccount_IsActive");

                    b.HasIndex("IsSystemAccount")
                        .HasDatabaseName("IX_GLAccount_IsSystemAccount");

                    b.HasIndex("OrganisationId")
                        .HasDatabaseName("IX_GLAccount_OrganisationId");

                    b.HasIndex("ParentAccountId")
                        .HasDatabaseName("IX_GLAccount_ParentAccountId");

                    b.HasIndex("OrganisationId", "AccountCode")
                        .IsUnique()
                        .HasDatabaseName("IX_GLAccount_OrganisationId_AccountCode");

                    b.HasIndex("OrganisationId", "IsActive")
                        .HasDatabaseName("IX_GLAccount_OrganisationId_IsActive");

                    b.HasIndex("OrganisationId", "AccountType", "IsActive")
                        .HasDatabaseName("IX_GLAccount_OrganisationId_AccountType_IsActive");

                    b.ToTable("GLAccount", "APP", t =>
                        {
                            t.HasCheckConstraint("CK_GLAccount_AccountCode_Format", "AccountCode - '^[0-9A-Z-]+$'");

                            t.HasCheckConstraint("CK_GLAccount_AccountCode_NotEmpty", "LENGTH(TRIM(AccountCode)) > 0");

                            t.HasCheckConstraint("CK_GLAccount_AccountName_NotEmpty", "LENGTH(TRIM(AccountName)) > 0");

                            t.HasCheckConstraint("CK_GLAccount_MaxDepth", "CASE \r\n                WHEN ParentAccountId IS NULL THEN 0\r\n                ELSE 1\r\n              END <= 1");

                            t.HasCheckConstraint("CK_GLAccount_NoSelfReference", "ParentAccountId IS NULL OR ParentAccountId != Id");
                        });
                });

            modelBuilder.Entity("PCI.Domain.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AmountDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomerId1")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PaymentTerms")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PriceListId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SalesOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Draft");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("IX_Invoices_CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("InvoiceDate")
                        .HasDatabaseName("IX_Invoices_InvoiceDate");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Invoices_InvoiceNumber");

                    b.HasIndex("OrganisationId")
                        .HasDatabaseName("IX_Invoices_OrganisationId");

                    b.HasIndex("PriceListId");

                    b.HasIndex("SalesOrderId")
                        .HasDatabaseName("IX_Invoices_SalesOrderId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Invoices_Status");

                    b.ToTable("Invoices", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemNotes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SalesOrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesOrderItemId");

                    b.ToTable("InvoiceItem", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.ItemAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemGroupId");

                    b.ToTable("ItemAttribute", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.ItemAttributeOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemAttributeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemAttributeId");

                    b.ToTable("ItemAttributeOption", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.ItemGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SKUPattern")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("ItemGroup", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Organisations", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.PriceList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("MarkupPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PricingMethod")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("PriceList", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.PriceListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaxQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MinQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PriceListId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PriceListId");

                    b.HasIndex("ProductId");

                    b.ToTable("PriceListItem", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BrandId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("CostPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CurrencyId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EAN")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ISBN")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("InventoryAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReturnable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("ManufacturerPartNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<int?>("PurchaseAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SKU")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("SalesAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<int?>("TaxMasterId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TrackInventory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("UPC")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UnitOfMeasureId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UnitOfMeasureId1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UnitOfMeasureId2")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VendorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BrandId")
                        .HasDatabaseName("IX_Product_BrandId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CurrencyId1");

                    b.HasIndex("InventoryAccountId");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Product_Name");

                    b.HasIndex("OrganisationId")
                        .HasDatabaseName("IX_Product_OrganisationId");

                    b.HasIndex("ProductType")
                        .HasDatabaseName("IX_Product_ProductType");

                    b.HasIndex("PurchaseAccountId");

                    b.HasIndex("SKU")
                        .HasDatabaseName("IX_Product_SKU");

                    b.HasIndex("SalesAccountId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Product_Status");

                    b.HasIndex("TaxMasterId");

                    b.HasIndex("UnitOfMeasureId");

                    b.HasIndex("UnitOfMeasureId1");

                    b.HasIndex("UnitOfMeasureId2");

                    b.HasIndex("VendorId");

                    b.HasIndex("OrganisationId", "SKU")
                        .IsUnique()
                        .HasDatabaseName("IX_Product_OrganisationId_SKU");

                    b.ToTable("Products", "APP", t =>
                        {
                            t.HasCheckConstraint("CK_Product_CostPrice_NonNegative", "CostPrice IS NULL OR CostPrice >= 0");

                            t.HasCheckConstraint("CK_Product_SellingPrice_NonNegative", "SellingPrice IS NULL OR SellingPrice >= 0");
                        });
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemAttributeOptionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ItemAttributeOptionId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValue", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("AverageCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPurchasable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReturnable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSaleable")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaximumStock")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MinimumStock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OpeningStock")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("OpeningStockValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityOnHand")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReorderLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReorderQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UnitOfMeasureId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VendorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("UnitOfMeasureId");

                    b.HasIndex("VendorId");

                    b.ToTable("ProductInventory", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductItemGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("ItemGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ItemGroupId")
                        .HasDatabaseName("IX_ProductItemGroup_ItemGroupId");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_ProductItemGroup_ProductId");

                    b.HasIndex("ProductId", "IsPrimary")
                        .HasDatabaseName("IX_ProductItemGroup_ProductId_IsPrimary");

                    b.HasIndex("ProductId", "ItemGroupId")
                        .IsUnique()
                        .HasDatabaseName("IX_ProductItemGroup_ProductId_ItemGroupId");

                    b.ToTable("ProductItemGroups", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductPhysical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DimensionUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(10,3)");

                    b.Property<int?>("WeightUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Width")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("DimensionUnitId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("WeightUnitId");

                    b.ToTable("ProductPhysical", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("Name", "OrganisationId")
                        .IsUnique();

                    b.ToTable("ProductTags", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductTagAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductTagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductTagId");

                    b.HasIndex("ProductId", "ProductTagId")
                        .IsUnique();

                    b.ToTable("ProductTagAssignments", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsTaxExempt")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TaxClassificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaxExemptReason")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TaxMasterId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TaxClassificationId");

                    b.HasIndex("TaxMasterId");

                    b.ToTable("ProductTax", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeliveryAddress")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OriginatingSalesOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PONumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentTerms")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PriceListId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VendorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("OriginatingSalesOrderId");

                    b.HasIndex("PriceListId");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchaseOrder", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.PurchaseOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("ExpectedReceiptDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemNotes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityOrdered")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityPending")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityReceived")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderItem", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.SalesOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BillingAddress")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PackedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PriceListId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuoteNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Draft");

                    b.Property<decimal>("SubTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TotalAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("IX_SalesOrder_CustomerId");

                    b.HasIndex("OrderDate")
                        .HasDatabaseName("IX_SalesOrder_OrderDate");

                    b.HasIndex("OrderNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_SalesOrder_OrderNumber");

                    b.HasIndex("OrganisationId")
                        .HasDatabaseName("IX_SalesOrder_OrganisationId");

                    b.HasIndex("PriceListId");

                    b.HasIndex("ReferenceNumber")
                        .HasDatabaseName("IX_SalesOrder_ReferenceNumber");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_SalesOrder_Status");

                    b.HasIndex("OrganisationId", "CustomerId")
                        .HasDatabaseName("IX_SalesOrder_OrganisationId_CustomerId");

                    b.HasIndex("OrganisationId", "OrderDate")
                        .HasDatabaseName("IX_SalesOrder_OrganisationId_OrderDate");

                    b.HasIndex("OrganisationId", "Status")
                        .HasDatabaseName("IX_SalesOrder_OrganisationId_Status");

                    b.ToTable("SalesOrders", "APP", t =>
                        {
                            t.HasCheckConstraint("CK_SalesOrder_SubTotal_NonNegative", "SubTotal >= 0");

                            t.HasCheckConstraint("CK_SalesOrder_TaxAmount_NonNegative", "TaxAmount >= 0");

                            t.HasCheckConstraint("CK_SalesOrder_TotalAmount_NonNegative", "TotalAmount >= 0");
                        });
                });

            modelBuilder.Entity("PCI.Domain.Models.SalesOrderApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApprovalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ApprovalStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Pending");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalStatus");

                    b.HasIndex("ApprovedDate");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesOrderApprovals", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.SalesOrderDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsConfidential")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UploadedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DocumentType")
                        .HasDatabaseName("IX_SalesOrderDocument_DocumentType");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_SalesOrderDocument_IsActive");

                    b.HasIndex("SalesOrderId")
                        .HasDatabaseName("IX_SalesOrderDocument_SalesOrderId");

                    b.HasIndex("UploadedOn")
                        .HasDatabaseName("IX_SalesOrderDocument_UploadedOn");

                    b.ToTable("SalesOrderDocuments", "APP", t =>
                        {
                            t.HasCheckConstraint("CK_SalesOrderDocument_FileSizeBytes_Positive", "FileSizeBytes > 0");
                        });
                });

            modelBuilder.Entity("PCI.Domain.Models.SalesOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ItemNotes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityAllocated")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityDelivered")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityPacked")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityShipped")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesOrderItem", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.SalesOrderPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("BalanceAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PaidAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentNotes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Pending");

                    b.Property<string>("PaymentTerms")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Net30");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DueDate");

                    b.HasIndex("PaymentStatus");

                    b.HasIndex("SalesOrderId")
                        .IsUnique();

                    b.ToTable("SalesOrderPayments", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.SalesOrderShipping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualDeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CarrierName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EstimatedDeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDropShipment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ShippingCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("ShippingMethod")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingNotes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Pending");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EstimatedDeliveryDate");

                    b.HasIndex("SalesOrderId")
                        .IsUnique();

                    b.HasIndex("ShippingStatus");

                    b.HasIndex("TrackingNumber");

                    b.ToTable("SalesOrderShippings", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(11,8)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("StateCode")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("IX_States_CountryId");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_States_Name");

                    b.HasIndex("StateCode")
                        .HasDatabaseName("IX_States_StateCode");

                    b.ToTable("States", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.StockTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("MovementType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("SalesOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("TotalValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("StockTransaction", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.TaxClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassificationType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DefaultTaxRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationType");

                    b.HasIndex("Code");

                    b.HasIndex("CountryCode");

                    b.HasIndex("IsActive");

                    b.HasIndex("OrganisationId");

                    b.ToTable("TaxClassifications", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.TaxMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TaxName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("TaxMaster", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.UnitOfMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("IsActive");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("UnitType");

                    b.ToTable("UnitOfMeasure", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Category")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasPortalAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDropshipVendor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsManufacturer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentVendorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PortalAccessEmail")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PreferredCommunicationMethod")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Email");

                    b.Property<bool>("RequiresPOApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<string>("StatusChangeReason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StatusChangedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("VendorCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("VendorType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_Vendor_Category");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("IX_Vendor_CurrencyId");

                    b.HasIndex("Industry")
                        .HasDatabaseName("IX_Vendor_Industry");

                    b.HasIndex("IsManufacturer")
                        .HasDatabaseName("IX_Vendor_IsManufacturer");

                    b.HasIndex("OrganisationId")
                        .HasDatabaseName("IX_Vendor_OrganisationId");

                    b.HasIndex("ParentVendorId")
                        .HasDatabaseName("IX_Vendor_ParentVendorId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Vendor_Status");

                    b.HasIndex("VendorCode")
                        .HasDatabaseName("IX_Vendor_VendorCode");

                    b.HasIndex("VendorName")
                        .HasDatabaseName("IX_Vendor_VendorName");

                    b.HasIndex("VendorType")
                        .HasDatabaseName("IX_Vendor_VendorType");

                    b.HasIndex("OrganisationId", "Category")
                        .HasDatabaseName("IX_Vendor_OrganisationId_Category");

                    b.HasIndex("OrganisationId", "Status")
                        .HasDatabaseName("IX_Vendor_OrganisationId_Status");

                    b.HasIndex("OrganisationId", "VendorCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Vendor_OrganisationId_VendorCode");

                    b.HasIndex("OrganisationId", "VendorType")
                        .HasDatabaseName("IX_Vendor_OrganisationId_VendorType");

                    b.ToTable("Vendors", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.VendorDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsConfidential")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("UploadedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("VendorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DocumentType")
                        .HasDatabaseName("IX_VendorDocument_DocumentType");

                    b.HasIndex("ExpiryDate")
                        .HasDatabaseName("IX_VendorDocument_ExpiryDate");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_VendorDocument_IsActive");

                    b.HasIndex("VendorId")
                        .HasDatabaseName("IX_VendorDocument_VendorId");

                    b.HasIndex("VendorId", "DocumentType")
                        .HasDatabaseName("IX_VendorDocument_VendorId_DocumentType");

                    b.HasIndex("VendorId", "IsActive")
                        .HasDatabaseName("IX_VendorDocument_VendorId_IsActive");

                    b.ToTable("VendorDocuments", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.VendorFinancial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BlacklistReason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentBalance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("EarlyPaymentDiscountDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(10);

                    b.Property<decimal>("EarlyPaymentDiscountPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsBlacklisted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastPaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastPurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastReviewDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinimumOrderValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OnTimeDeliveryRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("OutstandingAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("PaymentTermDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(30);

                    b.Property<string>("PreferredPaymentMethod")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("BankTransfer");

                    b.Property<decimal>("QualityRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TotalPurchasesLifetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("TotalPurchasesYTD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("VendorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("VendorId")
                        .IsUnique();

                    b.ToTable("VendorFinancials", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.VendorPerformance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionPlan")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("AreasForImprovement")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BlacklistDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("BlacklistReason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("BlacklistedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("CommunicationRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBlacklisted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPreferredVendor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastPerformanceReview")
                        .HasColumnType("TEXT");

                    b.Property<int>("LateDeliveries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("OnTimeDeliveries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("OnTimeDeliveryPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PerformanceRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("PriceCompetitivenessRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("QualityIssues")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("QualityRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("ResolvedComplaints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("ReviewPeriodEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReviewPeriodStart")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReviewedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("StrengthsNoted")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalOrdersInPeriod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("UnresolvedComplaints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("VendorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IsBlacklisted")
                        .HasDatabaseName("IX_VendorPerformance_IsBlacklisted");

                    b.HasIndex("IsPreferredVendor")
                        .HasDatabaseName("IX_VendorPerformance_IsPreferredVendor");

                    b.HasIndex("PerformanceRating")
                        .HasDatabaseName("IX_VendorPerformance_PerformanceRating");

                    b.HasIndex("ReviewPeriodEnd")
                        .HasDatabaseName("IX_VendorPerformance_ReviewPeriodEnd");

                    b.HasIndex("ReviewPeriodStart")
                        .HasDatabaseName("IX_VendorPerformance_ReviewPeriodStart");

                    b.HasIndex("VendorId")
                        .HasDatabaseName("IX_VendorPerformance_VendorId");

                    b.HasIndex("OrganisationId", "IsPreferredVendor")
                        .HasDatabaseName("IX_VendorPerformance_Organisation_IsPreferredVendor");

                    b.HasIndex("VendorId", "ReviewPeriodStart", "ReviewPeriodEnd")
                        .HasDatabaseName("IX_VendorPerformance_Vendor_Period");

                    b.ToTable("VendorPerformances", "APP", t =>
                        {
                            t.HasCheckConstraint("CK_VendorPerformance_CommunicationRating_Range", "CommunicationRating >= 0 AND CommunicationRating <= 100");

                            t.HasCheckConstraint("CK_VendorPerformance_OnTimeDeliveryPercentage_Range", "OnTimeDeliveryPercentage >= 0 AND OnTimeDeliveryPercentage <= 100");

                            t.HasCheckConstraint("CK_VendorPerformance_PerformanceRating_Range", "PerformanceRating >= 0 AND PerformanceRating <= 5");

                            t.HasCheckConstraint("CK_VendorPerformance_PriceCompetitivenessRating_Range", "PriceCompetitivenessRating >= 0 AND PriceCompetitivenessRating <= 100");

                            t.HasCheckConstraint("CK_VendorPerformance_QualityRating_Range", "QualityRating >= 0 AND QualityRating <= 100");

                            t.HasCheckConstraint("CK_VendorPerformance_ReviewPeriod_Valid", "ReviewPeriodEnd >= ReviewPeriodStart");
                        });
                });

            modelBuilder.Entity("PCI.Domain.Models.VendorPriceList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PriceListId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VendorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PriceListId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorPriceList", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.AccountTransaction", b =>
                {
                    b.HasOne("PCI.Domain.Models.GLAccount", "Account")
                        .WithMany("AccountTransactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.Invoice", null)
                        .WithMany("AccountTransactions")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.Brand", b =>
                {
                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.BusinessAddress", b =>
                {
                    b.HasOne("PCI.Domain.Models.Customer", null)
                        .WithMany("BusinessAddresses")
                        .HasForeignKey("CustomerId");

                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.Vendor", null)
                        .WithMany("BusinessAddresses")
                        .HasForeignKey("VendorId");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.BusinessBankInfo", b =>
                {
                    b.HasOne("PCI.Domain.Models.Customer", null)
                        .WithMany("BusinessBankInfos")
                        .HasForeignKey("CustomerId");

                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.Vendor", null)
                        .WithMany("BusinessBankInfos")
                        .HasForeignKey("VendorId");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.BusinessContact", b =>
                {
                    b.HasOne("PCI.Domain.Models.Customer", null)
                        .WithMany("BusinessContacts")
                        .HasForeignKey("CustomerId");

                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.Vendor", null)
                        .WithMany("BusinessContacts")
                        .HasForeignKey("VendorId");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.BusinessTaxInfo", b =>
                {
                    b.HasOne("PCI.Domain.Models.Customer", null)
                        .WithMany("BusinessTaxInfos")
                        .HasForeignKey("CustomerId");

                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.Vendor", null)
                        .WithMany("BusinessTaxInfos")
                        .HasForeignKey("VendorId");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.Currency", b =>
                {
                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.Customer", b =>
                {
                    b.HasOne("PCI.Domain.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.CustomerFinancial", b =>
                {
                    b.HasOne("PCI.Domain.Models.Customer", "Customer")
                        .WithOne("CustomerFinancial")
                        .HasForeignKey("PCI.Domain.Models.CustomerFinancial", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.CustomerPriceList", b =>
                {
                    b.HasOne("PCI.Domain.Models.Customer", null)
                        .WithMany("CustomerPriceLists")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.PriceList", "PriceList")
                        .WithMany("CustomerPriceLists")
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceList");
                });

            modelBuilder.Entity("PCI.Domain.Models.GLAccount", b =>
                {
                    b.HasOne("PCI.Domain.Models.AccountSubType", "AccountSubType")
                        .WithMany("GLAccounts")
                        .HasForeignKey("AccountSubTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.GLAccount", "ParentAccount")
                        .WithMany("SubAccounts")
                        .HasForeignKey("ParentAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AccountSubType");

                    b.Navigation("Organisation");

                    b.Navigation("ParentAccount");
                });

            modelBuilder.Entity("PCI.Domain.Models.Invoice", b =>
                {
                    b.HasOne("PCI.Domain.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.Customer", null)
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.PriceList", "PriceList")
                        .WithMany()
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PCI.Domain.Models.SalesOrder", "SalesOrder")
                        .WithMany()
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("Organisation");

                    b.Navigation("PriceList");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("PCI.Domain.Models.InvoiceItem", b =>
                {
                    b.HasOne("PCI.Domain.Models.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.SalesOrderItem", "SalesOrderItem")
                        .WithMany()
                        .HasForeignKey("SalesOrderItemId");

                    b.Navigation("Invoice");

                    b.Navigation("Product");

                    b.Navigation("SalesOrderItem");
                });

            modelBuilder.Entity("PCI.Domain.Models.ItemAttribute", b =>
                {
                    b.HasOne("PCI.Domain.Models.ItemGroup", "ItemGroup")
                        .WithMany("ItemAttributes")
                        .HasForeignKey("ItemGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemGroup");
                });

            modelBuilder.Entity("PCI.Domain.Models.ItemAttributeOption", b =>
                {
                    b.HasOne("PCI.Domain.Models.ItemAttribute", "ItemAttribute")
                        .WithMany("AttributeOptions")
                        .HasForeignKey("ItemAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemAttribute");
                });

            modelBuilder.Entity("PCI.Domain.Models.ItemGroup", b =>
                {
                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.PriceList", b =>
                {
                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.PriceListItem", b =>
                {
                    b.HasOne("PCI.Domain.Models.PriceList", "PriceList")
                        .WithMany("PriceListItems")
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithMany("PriceListItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceList");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PCI.Domain.Models.Product", b =>
                {
                    b.HasOne("PCI.Domain.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PCI.Domain.Models.Currency", null)
                        .WithMany("ProductsWithCostCurrency")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("PCI.Domain.Models.Currency", null)
                        .WithMany("ProductsWithSellingCurrency")
                        .HasForeignKey("CurrencyId1");

                    b.HasOne("PCI.Domain.Models.GLAccount", "InventoryAccount")
                        .WithMany("ProductsInventoryAccount")
                        .HasForeignKey("InventoryAccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.GLAccount", "PurchaseAccount")
                        .WithMany("ProductsPurchaseAccount")
                        .HasForeignKey("PurchaseAccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PCI.Domain.Models.GLAccount", "SalesAccount")
                        .WithMany("ProductsSalesAccount")
                        .HasForeignKey("SalesAccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PCI.Domain.Models.TaxMaster", null)
                        .WithMany("Products")
                        .HasForeignKey("TaxMasterId");

                    b.HasOne("PCI.Domain.Models.UnitOfMeasure", null)
                        .WithMany("ProductsWithDimensionUnit")
                        .HasForeignKey("UnitOfMeasureId");

                    b.HasOne("PCI.Domain.Models.UnitOfMeasure", null)
                        .WithMany("ProductsWithUnit")
                        .HasForeignKey("UnitOfMeasureId1");

                    b.HasOne("PCI.Domain.Models.UnitOfMeasure", null)
                        .WithMany("ProductsWithWeightUnit")
                        .HasForeignKey("UnitOfMeasureId2");

                    b.HasOne("PCI.Domain.Models.Vendor", null)
                        .WithMany("Products")
                        .HasForeignKey("VendorId");

                    b.Navigation("Brand");

                    b.Navigation("InventoryAccount");

                    b.Navigation("Organisation");

                    b.Navigation("PurchaseAccount");

                    b.Navigation("SalesAccount");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductAttributeValue", b =>
                {
                    b.HasOne("PCI.Domain.Models.ItemAttributeOption", "ItemAttributeOption")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ItemAttributeOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemAttributeOption");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductImage", b =>
                {
                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductInventory", b =>
                {
                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithOne("ProductInventory")
                        .HasForeignKey("PCI.Domain.Models.ProductInventory", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId");

                    b.HasOne("PCI.Domain.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");

                    b.Navigation("Product");

                    b.Navigation("UnitOfMeasure");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductItemGroup", b =>
                {
                    b.HasOne("PCI.Domain.Models.ItemGroup", "ItemGroup")
                        .WithMany("ProductItemGroups")
                        .HasForeignKey("ItemGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithMany("ProductItemGroups")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemGroup");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductPhysical", b =>
                {
                    b.HasOne("PCI.Domain.Models.UnitOfMeasure", "DimensionUnit")
                        .WithMany()
                        .HasForeignKey("DimensionUnitId");

                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithOne("ProductPhysical")
                        .HasForeignKey("PCI.Domain.Models.ProductPhysical", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.UnitOfMeasure", "WeightUnit")
                        .WithMany()
                        .HasForeignKey("WeightUnitId");

                    b.Navigation("DimensionUnit");

                    b.Navigation("Product");

                    b.Navigation("WeightUnit");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductTag", b =>
                {
                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductTagAssignment", b =>
                {
                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithMany("ProductTagAssignments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.ProductTag", "ProductTag")
                        .WithMany("ProductTagAssignments")
                        .HasForeignKey("ProductTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductTag");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductTax", b =>
                {
                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.TaxClassification", "TaxClassification")
                        .WithMany("ProductTaxes")
                        .HasForeignKey("TaxClassificationId");

                    b.HasOne("PCI.Domain.Models.TaxMaster", "TaxMaster")
                        .WithMany()
                        .HasForeignKey("TaxMasterId");

                    b.Navigation("Product");

                    b.Navigation("TaxClassification");

                    b.Navigation("TaxMaster");
                });

            modelBuilder.Entity("PCI.Domain.Models.PurchaseOrder", b =>
                {
                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.SalesOrder", "OriginatingSalesOrder")
                        .WithMany()
                        .HasForeignKey("OriginatingSalesOrderId");

                    b.HasOne("PCI.Domain.Models.PriceList", "PriceList")
                        .WithMany()
                        .HasForeignKey("PriceListId");

                    b.HasOne("PCI.Domain.Models.Vendor", "Vendor")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("OriginatingSalesOrder");

                    b.Navigation("PriceList");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("PCI.Domain.Models.PurchaseOrderItem", b =>
                {
                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("PCI.Domain.Models.SalesOrder", b =>
                {
                    b.HasOne("PCI.Domain.Models.Customer", "Customer")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.PriceList", "PriceList")
                        .WithMany()
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("Organisation");

                    b.Navigation("PriceList");
                });

            modelBuilder.Entity("PCI.Domain.Models.SalesOrderApproval", b =>
                {
                    b.HasOne("PCI.Domain.Models.SalesOrder", "SalesOrder")
                        .WithMany("SalesOrderApprovals")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("PCI.Domain.Models.SalesOrderDocument", b =>
                {
                    b.HasOne("PCI.Domain.Models.SalesOrder", "SalesOrder")
                        .WithMany("SalesOrderDocuments")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("PCI.Domain.Models.SalesOrderItem", b =>
                {
                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithMany("SalesOrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.SalesOrder", "SalesOrder")
                        .WithMany("SalesOrderItems")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("PCI.Domain.Models.SalesOrderPayment", b =>
                {
                    b.HasOne("PCI.Domain.Models.SalesOrder", "SalesOrder")
                        .WithOne("SalesOrderPayment")
                        .HasForeignKey("PCI.Domain.Models.SalesOrderPayment", "SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("PCI.Domain.Models.SalesOrderShipping", b =>
                {
                    b.HasOne("PCI.Domain.Models.SalesOrder", "SalesOrder")
                        .WithOne("SalesOrderShipping")
                        .HasForeignKey("PCI.Domain.Models.SalesOrderShipping", "SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("PCI.Domain.Models.State", b =>
                {
                    b.HasOne("PCI.Domain.Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("PCI.Domain.Models.StockTransaction", b =>
                {
                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("StockTransactions")
                        .HasForeignKey("PurchaseOrderId");

                    b.HasOne("PCI.Domain.Models.SalesOrder", "SalesOrder")
                        .WithMany("StockTransactions")
                        .HasForeignKey("SalesOrderId");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("PCI.Domain.Models.TaxClassification", b =>
                {
                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.TaxMaster", b =>
                {
                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.UnitOfMeasure", b =>
                {
                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.Vendor", b =>
                {
                    b.HasOne("PCI.Domain.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.Vendor", "ParentVendor")
                        .WithMany("ChildVendors")
                        .HasForeignKey("ParentVendorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Currency");

                    b.Navigation("Organisation");

                    b.Navigation("ParentVendor");
                });

            modelBuilder.Entity("PCI.Domain.Models.VendorDocument", b =>
                {
                    b.HasOne("PCI.Domain.Models.Vendor", "Vendor")
                        .WithMany("VendorDocuments")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("PCI.Domain.Models.VendorFinancial", b =>
                {
                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.Vendor", "Vendor")
                        .WithOne("VendorFinancial")
                        .HasForeignKey("PCI.Domain.Models.VendorFinancial", "VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("PCI.Domain.Models.VendorPerformance", b =>
                {
                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.Vendor", "Vendor")
                        .WithMany("VendorPerformances")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("PCI.Domain.Models.VendorPriceList", b =>
                {
                    b.HasOne("PCI.Domain.Models.PriceList", "PriceList")
                        .WithMany("VendorPriceLists")
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceList");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("PCI.Domain.Models.AccountSubType", b =>
                {
                    b.Navigation("GLAccounts");
                });

            modelBuilder.Entity("PCI.Domain.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PCI.Domain.Models.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("PCI.Domain.Models.Currency", b =>
                {
                    b.Navigation("ProductsWithCostCurrency");

                    b.Navigation("ProductsWithSellingCurrency");
                });

            modelBuilder.Entity("PCI.Domain.Models.Customer", b =>
                {
                    b.Navigation("BusinessAddresses");

                    b.Navigation("BusinessBankInfos");

                    b.Navigation("BusinessContacts");

                    b.Navigation("BusinessTaxInfos");

                    b.Navigation("CustomerFinancial");

                    b.Navigation("CustomerPriceLists");

                    b.Navigation("Invoices");

                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("PCI.Domain.Models.GLAccount", b =>
                {
                    b.Navigation("AccountTransactions");

                    b.Navigation("ProductsInventoryAccount");

                    b.Navigation("ProductsPurchaseAccount");

                    b.Navigation("ProductsSalesAccount");

                    b.Navigation("SubAccounts");
                });

            modelBuilder.Entity("PCI.Domain.Models.Invoice", b =>
                {
                    b.Navigation("AccountTransactions");

                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("PCI.Domain.Models.ItemAttribute", b =>
                {
                    b.Navigation("AttributeOptions");
                });

            modelBuilder.Entity("PCI.Domain.Models.ItemAttributeOption", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("PCI.Domain.Models.ItemGroup", b =>
                {
                    b.Navigation("ItemAttributes");

                    b.Navigation("ProductItemGroups");
                });

            modelBuilder.Entity("PCI.Domain.Models.PriceList", b =>
                {
                    b.Navigation("CustomerPriceLists");

                    b.Navigation("PriceListItems");

                    b.Navigation("VendorPriceLists");
                });

            modelBuilder.Entity("PCI.Domain.Models.Product", b =>
                {
                    b.Navigation("PriceListItems");

                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductInventory");

                    b.Navigation("ProductItemGroups");

                    b.Navigation("ProductPhysical");

                    b.Navigation("ProductTagAssignments");

                    b.Navigation("PurchaseOrderItems");

                    b.Navigation("SalesOrderItems");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductTag", b =>
                {
                    b.Navigation("ProductTagAssignments");
                });

            modelBuilder.Entity("PCI.Domain.Models.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderItems");

                    b.Navigation("StockTransactions");
                });

            modelBuilder.Entity("PCI.Domain.Models.SalesOrder", b =>
                {
                    b.Navigation("SalesOrderApprovals");

                    b.Navigation("SalesOrderDocuments");

                    b.Navigation("SalesOrderItems");

                    b.Navigation("SalesOrderPayment");

                    b.Navigation("SalesOrderShipping");

                    b.Navigation("StockTransactions");
                });

            modelBuilder.Entity("PCI.Domain.Models.TaxClassification", b =>
                {
                    b.Navigation("ProductTaxes");
                });

            modelBuilder.Entity("PCI.Domain.Models.TaxMaster", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PCI.Domain.Models.UnitOfMeasure", b =>
                {
                    b.Navigation("ProductsWithDimensionUnit");

                    b.Navigation("ProductsWithUnit");

                    b.Navigation("ProductsWithWeightUnit");
                });

            modelBuilder.Entity("PCI.Domain.Models.Vendor", b =>
                {
                    b.Navigation("BusinessAddresses");

                    b.Navigation("BusinessBankInfos");

                    b.Navigation("BusinessContacts");

                    b.Navigation("BusinessTaxInfos");

                    b.Navigation("ChildVendors");

                    b.Navigation("Products");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("VendorDocuments");

                    b.Navigation("VendorFinancial");

                    b.Navigation("VendorPerformances");
                });
#pragma warning restore 612, 618
        }
    }
}
