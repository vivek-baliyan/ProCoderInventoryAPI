// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PCI.Persistence.Context;

#nullable disable

namespace PCI.Persistence.Migrations.Application
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250726183638_RemoveCategoriesAddTags")]
    partial class RemoveCategoriesAddTags
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("APP")
                .HasAnnotation("ProductVersion", "8.0.13");

            modelBuilder.Entity("PCI.Domain.Models.AccountSubType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountType")
                        .HasDatabaseName("IX_AccountSubType_AccountType");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_AccountSubType_Code");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_AccountSubType_IsActive");

                    b.HasIndex("AccountType", "DisplayOrder")
                        .HasDatabaseName("IX_AccountSubType_AccountType_DisplayOrder");

                    b.ToTable("AccountSubType", "APP");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountType = 1,
                            Code = "CASH",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cash and cash equivalents",
                            DisplayOrder = 1,
                            IsActive = true,
                            Name = "Cash"
                        },
                        new
                        {
                            Id = 2,
                            AccountType = 1,
                            Code = "BANK",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bank accounts",
                            DisplayOrder = 2,
                            IsActive = true,
                            Name = "Bank"
                        },
                        new
                        {
                            Id = 3,
                            AccountType = 1,
                            Code = "AR",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Money owed by customers",
                            DisplayOrder = 3,
                            IsActive = true,
                            Name = "Accounts Receivable"
                        },
                        new
                        {
                            Id = 4,
                            AccountType = 1,
                            Code = "INV",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Goods held for sale",
                            DisplayOrder = 4,
                            IsActive = true,
                            Name = "Inventory"
                        },
                        new
                        {
                            Id = 5,
                            AccountType = 1,
                            Code = "OCA",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Other current assets",
                            DisplayOrder = 5,
                            IsActive = true,
                            Name = "Other Current Asset"
                        },
                        new
                        {
                            Id = 6,
                            AccountType = 1,
                            Code = "FA",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Property, plant and equipment",
                            DisplayOrder = 6,
                            IsActive = true,
                            Name = "Fixed Asset"
                        },
                        new
                        {
                            Id = 7,
                            AccountType = 1,
                            Code = "AD",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Accumulated depreciation on fixed assets",
                            DisplayOrder = 7,
                            IsActive = true,
                            Name = "Accumulated Depreciation"
                        },
                        new
                        {
                            Id = 8,
                            AccountType = 1,
                            Code = "OA",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Other non-current assets",
                            DisplayOrder = 8,
                            IsActive = true,
                            Name = "Other Asset"
                        },
                        new
                        {
                            Id = 20,
                            AccountType = 2,
                            Code = "AP",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Money owed to suppliers",
                            DisplayOrder = 1,
                            IsActive = true,
                            Name = "Accounts Payable"
                        },
                        new
                        {
                            Id = 21,
                            AccountType = 2,
                            Code = "CC",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Credit card liabilities",
                            DisplayOrder = 2,
                            IsActive = true,
                            Name = "Credit Card"
                        },
                        new
                        {
                            Id = 22,
                            AccountType = 2,
                            Code = "TP",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Taxes owed",
                            DisplayOrder = 3,
                            IsActive = true,
                            Name = "Tax Payable"
                        },
                        new
                        {
                            Id = 23,
                            AccountType = 2,
                            Code = "OCL",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Other current liabilities",
                            DisplayOrder = 4,
                            IsActive = true,
                            Name = "Other Current Liability"
                        },
                        new
                        {
                            Id = 24,
                            AccountType = 2,
                            Code = "LTL",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Long-term debt and obligations",
                            DisplayOrder = 5,
                            IsActive = true,
                            Name = "Long Term Liability"
                        },
                        new
                        {
                            Id = 40,
                            AccountType = 3,
                            Code = "OE",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Owner's equity",
                            DisplayOrder = 1,
                            IsActive = true,
                            Name = "Owner Equity"
                        },
                        new
                        {
                            Id = 41,
                            AccountType = 3,
                            Code = "RE",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Accumulated profits",
                            DisplayOrder = 2,
                            IsActive = true,
                            Name = "Retained Earnings"
                        },
                        new
                        {
                            Id = 42,
                            AccountType = 3,
                            Code = "OBE",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Opening balance adjustments",
                            DisplayOrder = 3,
                            IsActive = true,
                            Name = "Opening Balance Equity"
                        },
                        new
                        {
                            Id = 60,
                            AccountType = 4,
                            Code = "SR",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Revenue from sales",
                            DisplayOrder = 1,
                            IsActive = true,
                            Name = "Sales Revenue"
                        },
                        new
                        {
                            Id = 61,
                            AccountType = 4,
                            Code = "SER",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Revenue from services",
                            DisplayOrder = 2,
                            IsActive = true,
                            Name = "Service Revenue"
                        },
                        new
                        {
                            Id = 62,
                            AccountType = 4,
                            Code = "OI",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Other income sources",
                            DisplayOrder = 3,
                            IsActive = true,
                            Name = "Other Income"
                        },
                        new
                        {
                            Id = 63,
                            AccountType = 4,
                            Code = "II",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Interest earned",
                            DisplayOrder = 4,
                            IsActive = true,
                            Name = "Interest Income"
                        },
                        new
                        {
                            Id = 80,
                            AccountType = 5,
                            Code = "COGS",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Direct costs of producing goods",
                            DisplayOrder = 1,
                            IsActive = true,
                            Name = "Cost of Goods Sold"
                        },
                        new
                        {
                            Id = 81,
                            AccountType = 5,
                            Code = "OPEX",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Operating expenses",
                            DisplayOrder = 2,
                            IsActive = true,
                            Name = "Operating Expense"
                        },
                        new
                        {
                            Id = 82,
                            AccountType = 5,
                            Code = "ADMIN",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Administrative expenses",
                            DisplayOrder = 3,
                            IsActive = true,
                            Name = "Administrative Expense"
                        },
                        new
                        {
                            Id = 83,
                            AccountType = 5,
                            Code = "SELL",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sales and marketing expenses",
                            DisplayOrder = 4,
                            IsActive = true,
                            Name = "Selling Expense"
                        },
                        new
                        {
                            Id = 84,
                            AccountType = 5,
                            Code = "IE",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Interest paid on debt",
                            DisplayOrder = 5,
                            IsActive = true,
                            Name = "Interest Expense"
                        },
                        new
                        {
                            Id = 85,
                            AccountType = 5,
                            Code = "TAX",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tax expenses",
                            DisplayOrder = 6,
                            IsActive = true,
                            Name = "Tax Expense"
                        },
                        new
                        {
                            Id = 86,
                            AccountType = 5,
                            Code = "OEXP",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Other miscellaneous expenses",
                            DisplayOrder = 7,
                            IsActive = true,
                            Name = "Other Expense"
                        });
                });

            modelBuilder.Entity("PCI.Domain.Models.AccountTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("EntryType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("AccountTransaction", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.BatchNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BatchNumberValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ManufactureDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("BatchNumber", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Brand", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("DecimalPlaces")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBaseCurrency")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsBaseCurrency");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Currencies", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.CustomerPriceList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PriceListId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PriceListId");

                    b.ToTable("CustomerPriceList", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.GLAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("AccountSubTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BalanceType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsSystemAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentAccountId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountCode")
                        .HasDatabaseName("IX_GLAccount_AccountCode");

                    b.HasIndex("AccountName")
                        .HasDatabaseName("IX_GLAccount_AccountName");

                    b.HasIndex("AccountSubTypeId")
                        .HasDatabaseName("IX_GLAccount_AccountSubTypeId");

                    b.HasIndex("AccountType")
                        .HasDatabaseName("IX_GLAccount_AccountType");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_GLAccount_IsActive");

                    b.HasIndex("IsSystemAccount")
                        .HasDatabaseName("IX_GLAccount_IsSystemAccount");

                    b.HasIndex("OrganisationId")
                        .HasDatabaseName("IX_GLAccount_OrganisationId");

                    b.HasIndex("ParentAccountId")
                        .HasDatabaseName("IX_GLAccount_ParentAccountId");

                    b.HasIndex("OrganisationId", "AccountCode")
                        .IsUnique()
                        .HasDatabaseName("IX_GLAccount_OrganisationId_AccountCode");

                    b.HasIndex("OrganisationId", "IsActive")
                        .HasDatabaseName("IX_GLAccount_OrganisationId_IsActive");

                    b.HasIndex("OrganisationId", "AccountType", "IsActive")
                        .HasDatabaseName("IX_GLAccount_OrganisationId_AccountType_IsActive");

                    b.ToTable("GLAccount", "APP", t =>
                        {
                            t.HasCheckConstraint("CK_GLAccount_AccountCode_Format", "AccountCode - '^[0-9A-Z-]+$'");

                            t.HasCheckConstraint("CK_GLAccount_AccountCode_NotEmpty", "LENGTH(TRIM(AccountCode)) > 0");

                            t.HasCheckConstraint("CK_GLAccount_AccountName_NotEmpty", "LENGTH(TRIM(AccountName)) > 0");

                            t.HasCheckConstraint("CK_GLAccount_MaxDepth", "CASE \r\n                WHEN ParentAccountId IS NULL THEN 0\r\n                ELSE 1\r\n              END <= 1");

                            t.HasCheckConstraint("CK_GLAccount_NoSelfReference", "ParentAccountId IS NULL OR ParentAccountId != Id");
                        });
                });

            modelBuilder.Entity("PCI.Domain.Models.ItemAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemGroupId");

                    b.ToTable("ItemAttribute", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.ItemAttributeOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemAttributeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemAttributeId");

                    b.ToTable("ItemAttributeOption", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.ItemGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SKUPattern")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("ItemGroup", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Organisations", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.PriceList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("MarkupPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PricingMethod")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("PriceList", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.PriceListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaxQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MinQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PriceListId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PriceListId");

                    b.HasIndex("ProductId");

                    b.ToTable("PriceListItem", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("BatchTracking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int?>("BrandId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("CostPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CurrencyId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("EAN")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ISBN")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("InventoryAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsTaxable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<int?>("ItemGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ManufacturerPartNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<int?>("PurchaseAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SKU")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("SalesAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("SerialNumberTracking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<int?>("TaxMasterId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TrackInventory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("UPC")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UnitOfMeasureId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UnitOfMeasureId1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UnitOfMeasureId2")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VendorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BrandId")
                        .HasDatabaseName("IX_Product_BrandId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CurrencyId1");

                    b.HasIndex("InventoryAccountId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Product_IsActive");

                    b.HasIndex("ItemGroupId")
                        .HasDatabaseName("IX_Product_ItemGroupId");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Product_Name");

                    b.HasIndex("OrganisationId")
                        .HasDatabaseName("IX_Product_OrganisationId");

                    b.HasIndex("ProductType")
                        .HasDatabaseName("IX_Product_ProductType");

                    b.HasIndex("PurchaseAccountId");

                    b.HasIndex("SKU")
                        .HasDatabaseName("IX_Product_SKU");

                    b.HasIndex("SalesAccountId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Product_Status");

                    b.HasIndex("TaxMasterId");

                    b.HasIndex("UnitOfMeasureId");

                    b.HasIndex("UnitOfMeasureId1");

                    b.HasIndex("UnitOfMeasureId2");

                    b.HasIndex("VendorId");

                    b.HasIndex("OrganisationId", "IsActive")
                        .HasDatabaseName("IX_Product_OrganisationId_IsActive");

                    b.HasIndex("OrganisationId", "SKU")
                        .IsUnique()
                        .HasDatabaseName("IX_Product_OrganisationId_SKU");

                    b.ToTable("Products", "APP", t =>
                        {
                            t.HasCheckConstraint("CK_Product_CostPrice_NonNegative", "CostPrice IS NULL OR CostPrice >= 0");

                            t.HasCheckConstraint("CK_Product_SellingPrice_NonNegative", "SellingPrice IS NULL OR SellingPrice >= 0");
                        });
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemAttributeOptionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ItemAttributeOptionId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValue", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("AverageCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPurchasable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReturnable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSaleable")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaximumStock")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MinimumStock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OpeningStock")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("OpeningStockValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityOnHand")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReorderLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReorderQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UnitOfMeasureId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VendorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("UnitOfMeasureId");

                    b.HasIndex("VendorId");

                    b.ToTable("ProductInventory", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductPhysical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DimensionUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(10,3)");

                    b.Property<int?>("WeightUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Width")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("DimensionUnitId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("WeightUnitId");

                    b.ToTable("ProductPhysical", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("Name", "OrganisationId")
                        .IsUnique();

                    b.ToTable("ProductTags", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductTagAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductTagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductTagId");

                    b.HasIndex("ProductId", "ProductTagId")
                        .IsUnique();

                    b.ToTable("ProductTagAssignments", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsTaxExempt")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TaxClassificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaxExemptReason")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TaxMasterId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("TaxClassificationId");

                    b.HasIndex("TaxMasterId");

                    b.ToTable("ProductTax", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeliveryAddress")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OriginatingSalesOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PONumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentTerms")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PriceListId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VendorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("OriginatingSalesOrderId");

                    b.HasIndex("PriceListId");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchaseOrder", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.PurchaseOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("ExpectedReceiptDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemNotes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityOrdered")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityPending")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityReceived")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderItem", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.SalesOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BillingAddress")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDropShipment")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PackedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PriceListId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("PriceListId");

                    b.ToTable("SalesOrder", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.SalesOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ItemNotes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityAllocated")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityDelivered")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityPacked")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityShipped")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesOrderItem", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.SerialNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumberValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SoldDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("SerialNumber", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.StockTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("MovementType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("SalesOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("TotalValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("StockTransaction", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.TaxClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassificationType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DefaultTaxRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationType");

                    b.HasIndex("Code");

                    b.HasIndex("CountryCode");

                    b.HasIndex("IsActive");

                    b.HasIndex("OrganisationId");

                    b.ToTable("TaxClassifications", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.TaxMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TaxName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("TaxMaster", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.UnitOfMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("IsActive");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("UnitType");

                    b.ToTable("UnitOfMeasure", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("VendorCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Vendor", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.VendorPriceList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PriceListId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VendorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PriceListId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorPriceList", "APP");
                });

            modelBuilder.Entity("PCI.Domain.Models.AccountTransaction", b =>
                {
                    b.HasOne("PCI.Domain.Models.GLAccount", "Account")
                        .WithMany("AccountTransactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.BatchNumber", b =>
                {
                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithMany("BatchNumbers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PCI.Domain.Models.Brand", b =>
                {
                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.Currency", b =>
                {
                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.CustomerPriceList", b =>
                {
                    b.HasOne("PCI.Domain.Models.PriceList", "PriceList")
                        .WithMany("CustomerPriceLists")
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceList");
                });

            modelBuilder.Entity("PCI.Domain.Models.GLAccount", b =>
                {
                    b.HasOne("PCI.Domain.Models.AccountSubType", "AccountSubType")
                        .WithMany("GLAccounts")
                        .HasForeignKey("AccountSubTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.GLAccount", "ParentAccount")
                        .WithMany("SubAccounts")
                        .HasForeignKey("ParentAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AccountSubType");

                    b.Navigation("Currency");

                    b.Navigation("Organisation");

                    b.Navigation("ParentAccount");
                });

            modelBuilder.Entity("PCI.Domain.Models.ItemAttribute", b =>
                {
                    b.HasOne("PCI.Domain.Models.ItemGroup", "ItemGroup")
                        .WithMany("ItemAttributes")
                        .HasForeignKey("ItemGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemGroup");
                });

            modelBuilder.Entity("PCI.Domain.Models.ItemAttributeOption", b =>
                {
                    b.HasOne("PCI.Domain.Models.ItemAttribute", "ItemAttribute")
                        .WithMany("AttributeOptions")
                        .HasForeignKey("ItemAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemAttribute");
                });

            modelBuilder.Entity("PCI.Domain.Models.ItemGroup", b =>
                {
                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.PriceList", b =>
                {
                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.PriceListItem", b =>
                {
                    b.HasOne("PCI.Domain.Models.PriceList", "PriceList")
                        .WithMany("PriceListItems")
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithMany("PriceListItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceList");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PCI.Domain.Models.Product", b =>
                {
                    b.HasOne("PCI.Domain.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PCI.Domain.Models.Currency", null)
                        .WithMany("ProductsWithCostCurrency")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("PCI.Domain.Models.Currency", null)
                        .WithMany("ProductsWithSellingCurrency")
                        .HasForeignKey("CurrencyId1");

                    b.HasOne("PCI.Domain.Models.GLAccount", "InventoryAccount")
                        .WithMany("ProductsInventoryAccount")
                        .HasForeignKey("InventoryAccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PCI.Domain.Models.ItemGroup", "ItemGroup")
                        .WithMany("Products")
                        .HasForeignKey("ItemGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.GLAccount", "PurchaseAccount")
                        .WithMany("ProductsPurchaseAccount")
                        .HasForeignKey("PurchaseAccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PCI.Domain.Models.GLAccount", "SalesAccount")
                        .WithMany("ProductsSalesAccount")
                        .HasForeignKey("SalesAccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PCI.Domain.Models.TaxMaster", null)
                        .WithMany("Products")
                        .HasForeignKey("TaxMasterId");

                    b.HasOne("PCI.Domain.Models.UnitOfMeasure", null)
                        .WithMany("ProductsWithDimensionUnit")
                        .HasForeignKey("UnitOfMeasureId");

                    b.HasOne("PCI.Domain.Models.UnitOfMeasure", null)
                        .WithMany("ProductsWithUnit")
                        .HasForeignKey("UnitOfMeasureId1");

                    b.HasOne("PCI.Domain.Models.UnitOfMeasure", null)
                        .WithMany("ProductsWithWeightUnit")
                        .HasForeignKey("UnitOfMeasureId2");

                    b.HasOne("PCI.Domain.Models.Vendor", null)
                        .WithMany("Products")
                        .HasForeignKey("VendorId");

                    b.Navigation("Brand");

                    b.Navigation("InventoryAccount");

                    b.Navigation("ItemGroup");

                    b.Navigation("Organisation");

                    b.Navigation("PurchaseAccount");

                    b.Navigation("SalesAccount");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductAttributeValue", b =>
                {
                    b.HasOne("PCI.Domain.Models.ItemAttributeOption", "ItemAttributeOption")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ItemAttributeOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemAttributeOption");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductImage", b =>
                {
                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductInventory", b =>
                {
                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithOne("ProductInventory")
                        .HasForeignKey("PCI.Domain.Models.ProductInventory", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId");

                    b.HasOne("PCI.Domain.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");

                    b.Navigation("Product");

                    b.Navigation("UnitOfMeasure");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductPhysical", b =>
                {
                    b.HasOne("PCI.Domain.Models.UnitOfMeasure", "DimensionUnit")
                        .WithMany()
                        .HasForeignKey("DimensionUnitId");

                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithOne("ProductPhysical")
                        .HasForeignKey("PCI.Domain.Models.ProductPhysical", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.UnitOfMeasure", "WeightUnit")
                        .WithMany()
                        .HasForeignKey("WeightUnitId");

                    b.Navigation("DimensionUnit");

                    b.Navigation("Product");

                    b.Navigation("WeightUnit");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductTag", b =>
                {
                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductTagAssignment", b =>
                {
                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithMany("ProductTagAssignments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.ProductTag", "ProductTag")
                        .WithMany("ProductTagAssignments")
                        .HasForeignKey("ProductTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductTag");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductTax", b =>
                {
                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithOne("ProductTax")
                        .HasForeignKey("PCI.Domain.Models.ProductTax", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.TaxClassification", "TaxClassification")
                        .WithMany("ProductTaxes")
                        .HasForeignKey("TaxClassificationId");

                    b.HasOne("PCI.Domain.Models.TaxMaster", "TaxMaster")
                        .WithMany()
                        .HasForeignKey("TaxMasterId");

                    b.Navigation("Product");

                    b.Navigation("TaxClassification");

                    b.Navigation("TaxMaster");
                });

            modelBuilder.Entity("PCI.Domain.Models.PurchaseOrder", b =>
                {
                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.SalesOrder", "OriginatingSalesOrder")
                        .WithMany()
                        .HasForeignKey("OriginatingSalesOrderId");

                    b.HasOne("PCI.Domain.Models.PriceList", "PriceList")
                        .WithMany()
                        .HasForeignKey("PriceListId");

                    b.HasOne("PCI.Domain.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("OriginatingSalesOrder");

                    b.Navigation("PriceList");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("PCI.Domain.Models.PurchaseOrderItem", b =>
                {
                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("PCI.Domain.Models.SalesOrder", b =>
                {
                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.PriceList", "PriceList")
                        .WithMany()
                        .HasForeignKey("PriceListId");

                    b.Navigation("Organisation");

                    b.Navigation("PriceList");
                });

            modelBuilder.Entity("PCI.Domain.Models.SalesOrderItem", b =>
                {
                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithMany("SalesOrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.SalesOrder", "SalesOrder")
                        .WithMany("SalesOrderItems")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("PCI.Domain.Models.SerialNumber", b =>
                {
                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithMany("SerialNumbers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PCI.Domain.Models.StockTransaction", b =>
                {
                    b.HasOne("PCI.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("StockTransactions")
                        .HasForeignKey("PurchaseOrderId");

                    b.HasOne("PCI.Domain.Models.SalesOrder", "SalesOrder")
                        .WithMany("StockTransactions")
                        .HasForeignKey("SalesOrderId");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("PCI.Domain.Models.TaxClassification", b =>
                {
                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.TaxMaster", b =>
                {
                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.UnitOfMeasure", b =>
                {
                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.Vendor", b =>
                {
                    b.HasOne("PCI.Domain.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("PCI.Domain.Models.VendorPriceList", b =>
                {
                    b.HasOne("PCI.Domain.Models.PriceList", "PriceList")
                        .WithMany("VendorPriceLists")
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCI.Domain.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceList");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("PCI.Domain.Models.AccountSubType", b =>
                {
                    b.Navigation("GLAccounts");
                });

            modelBuilder.Entity("PCI.Domain.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PCI.Domain.Models.Currency", b =>
                {
                    b.Navigation("ProductsWithCostCurrency");

                    b.Navigation("ProductsWithSellingCurrency");
                });

            modelBuilder.Entity("PCI.Domain.Models.GLAccount", b =>
                {
                    b.Navigation("AccountTransactions");

                    b.Navigation("ProductsInventoryAccount");

                    b.Navigation("ProductsPurchaseAccount");

                    b.Navigation("ProductsSalesAccount");

                    b.Navigation("SubAccounts");
                });

            modelBuilder.Entity("PCI.Domain.Models.ItemAttribute", b =>
                {
                    b.Navigation("AttributeOptions");
                });

            modelBuilder.Entity("PCI.Domain.Models.ItemAttributeOption", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("PCI.Domain.Models.ItemGroup", b =>
                {
                    b.Navigation("ItemAttributes");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("PCI.Domain.Models.PriceList", b =>
                {
                    b.Navigation("CustomerPriceLists");

                    b.Navigation("PriceListItems");

                    b.Navigation("VendorPriceLists");
                });

            modelBuilder.Entity("PCI.Domain.Models.Product", b =>
                {
                    b.Navigation("BatchNumbers");

                    b.Navigation("PriceListItems");

                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductInventory");

                    b.Navigation("ProductPhysical");

                    b.Navigation("ProductTagAssignments");

                    b.Navigation("ProductTax");

                    b.Navigation("PurchaseOrderItems");

                    b.Navigation("SalesOrderItems");

                    b.Navigation("SerialNumbers");
                });

            modelBuilder.Entity("PCI.Domain.Models.ProductTag", b =>
                {
                    b.Navigation("ProductTagAssignments");
                });

            modelBuilder.Entity("PCI.Domain.Models.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderItems");

                    b.Navigation("StockTransactions");
                });

            modelBuilder.Entity("PCI.Domain.Models.SalesOrder", b =>
                {
                    b.Navigation("SalesOrderItems");

                    b.Navigation("StockTransactions");
                });

            modelBuilder.Entity("PCI.Domain.Models.TaxClassification", b =>
                {
                    b.Navigation("ProductTaxes");
                });

            modelBuilder.Entity("PCI.Domain.Models.TaxMaster", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PCI.Domain.Models.UnitOfMeasure", b =>
                {
                    b.Navigation("ProductsWithDimensionUnit");

                    b.Navigation("ProductsWithUnit");

                    b.Navigation("ProductsWithWeightUnit");
                });

            modelBuilder.Entity("PCI.Domain.Models.Vendor", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
